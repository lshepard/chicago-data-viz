'use strict';

/**
 * This file controls the visualization editor. It works on top of vb.js inside
 * of the admin dashboard.
 */

// The _vbAdminGlobal is set by wp_localize_script() in the vb admin php file.
var _vbPluginUrl = _vbAdminGlobal.vbPluginUrl;
var _vbUploadDir = _vbAdminGlobal.vbUploadDir;
var _vbAliasesFileUrl = _vbAdminGlobal.vbAliasesFileUrl;
var _vbConfigFileUrl = _vbAdminGlobal.vbConfigFileUrl;
var $ = jQuery;

// Initialize all modules.
angular.module('vbAdmin.tabs', []);
angular.module('vbAdmin.chart', []);
angular.module('vbAdmin.datasetSelect', []);
angular.module('vbAdmin.shortcode', []);
angular.module('vbAdmin.iframelink', []);

/**
 * Kick it off.
 */
(function (vb, $, angular) {

    var _vbPluginUrl = _vbAdminGlobal.vbPluginUrl;
    var _vbUploadDir = _vbAdminGlobal.vbUploadDir;
    var _vbAliasesFileUrl = _vbAdminGlobal.vbAliasesFileUrl;
    var _vbConfigFileUrl = _vbAdminGlobal.vbConfigFileUrl;

    var vbAdmin = angular.module('vbAdmin', ['vbAdmin.tabs', 'vbAdmin.chart', 'vbAdmin.datasetSelect', 'vbAdmin.shortcode', 'vbAdmin.iframelink']);

    vbAdmin.factory("datasetsService", function ($http, $timeout) {
        var count = 0;
        var datasets = [];

        // Function to load all datasets via Ajax calls.
        function loadDatasets() {

            // Load the aliases.
            var aliases_url = _vbAliasesFileUrl;
            $http.get(aliases_url).success(function (aliases) {
                for (var alias in aliases) {
                    var metadata = {
                        id: alias,
                        uploaded_name: alias,
                        type: 'Aliases'
                    };

                    addDataset(metadata);
                }
            });

            // And load all dataset IDs.
            var ids_url = _vbPluginUrl + 'vis/api.php?filter=id';
            $http.get(ids_url).success(function (ids) {

                // Function to fetch metadata given a dataset ID.
                function fetchMetaFromId(id) {
                    var next_meta_url = _vbPluginUrl + 'vis/api.php?filename=' + id + '_meta.json';
                    var req = $http.get(next_meta_url).success(function (next_meta) {
                        next_meta.type = 'Uploaded file names';
                        addDataset(next_meta);
                    });
                    return req;
                }

                // Then fetch metadata for all datasets.
                $.apply($, $.map(ids, fetchMetaFromId));
            });
        }

        function addDataset(meta) {
            datasets.push(meta);
            count = count + 1;
        }

        function getCount() {
            return count;
        }

        function getDatasets() {
            return datasets;
        }

        return {
            getCount: getCount,
            getDatasets: getDatasets,
            loadDatasets: loadDatasets
        };
    });

    vbAdmin.controller('vbController', function ($scope, datasetsService) {
        console.log('vbController running.');
        datasetsService.loadDatasets();
    });
})(visualbudget, jQuery, angular);
'use strict';

/*
 * The "chart" directive of the VB dashboard.
 */

var chartController = function chartController($scope, $http, $sce) {
    $scope.ctrl = this;
    var that = this;

    var chartUrl = _vbPluginUrl + 'vis/vis.php?';

    this.getUrl = function () {
        $scope.$parent.$parent.atts.vis = $scope.vis;
        var atts = angular.copy($scope.$parent.$parent.atts);
        if ($scope.metric) {
            atts.metric = $scope.metric;
        }

        return chartUrl + that.serialize(atts);
    };

    this.setHtml = function (html) {
        $scope.html = $sce.trustAsHtml(html);
    };

    // Turn a JS object into a query string of some form.
    // based on code from  http://stackoverflow.com/a/1714899
    this.serialize = function (obj) {
        var sep = '&';
        var str = [];
        for (var p in obj) {
            if (obj.hasOwnProperty(p)) {
                str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
            }
        }return str.join(sep);
    };
};

var chartLinkFunction = function chartLinkFunction(scope, element, attrs, paneController) {
    paneController.addChart(scope);
};

angular.module('vbAdmin.chart').directive('chart', function () {
    return {
        require: '^pane',
        restrict: 'E',
        transclude: false,
        scope: { vis: '@', metric: '@' },
        link: chartLinkFunction,
        controller: chartController,
        templateUrl: _vbPluginUrl + 'admin/js/templates/chart.html',
        replace: true
    };
});
'use strict';

/*
 * The "dataset-select" directive of the VB dashboard.
 */

var datasetSelectController = function datasetSelectController($scope, $http, $attrs) {
    $scope.ctrl = this;
    $scope.multiple = 'multiple' in $attrs;
    if ($scope.multiple) {
        $scope.$emit('addSecondDefaultSelectedDataset');
    }

    $scope.setDataset = function () {
        $scope.$parent.atts.data = $scope.multiple ? $scope.$parent.chartData.datasets.map(function (e) {
            return e.id;
        }).join(',') : $scope.$parent.chartData.dataset.id;

        // Redraw only if this pane is selected.
        if ($scope.$parent.selected) {
            $scope.$parent.ctrl.redrawCharts();
        }
    };
};

var datasetSelectLinkFunction = function datasetSelectLinkFunction(scope, element, attrs, paneController) {
    paneController.addDatasetSelect(scope);
};

angular.module('vbAdmin.datasetSelect').directive('datasetSelect', function () {
    return {
        require: '^pane',
        restrict: 'E',
        transclude: false,
        scope: false,
        link: datasetSelectLinkFunction,
        controller: datasetSelectController,
        templateUrl: _vbPluginUrl + 'admin/js/templates/datasetSelect.html',
        replace: true
    };
});
'use strict';

/*
 * The "iframelink" directive of the VB dashboard.
 */

var iframelinkController = function iframelinkController($scope, $http) {
    $scope.ctrl = this;

    this.iframelink = function () {
        var atts = angular.copy($scope.$parent.$parent.atts);
        if ($scope.metric) {
            atts.metric = $scope.metric;
        }
        atts.iframe = 1;

        return _vbPluginUrl + 'vis/vis.php?' + this.serialize(atts);
    };

    // Turn a JS object into a query string of some form.
    // based on code from  http://stackoverflow.com/a/1714899
    this.serialize = function (obj) {
        var sep = '&';
        var str = [];
        for (var p in obj) {
            if (obj.hasOwnProperty(p)) {
                var prop = encodeURIComponent(p);
                var val = encodeURIComponent(obj[p]).replace(/%2C/g, ","); // Commas abide.
                str.push(prop + "=" + val);
            }
        }return str.join(sep);
    };
};

angular.module('vbAdmin.iframelink').directive('iframelink', function () {
    return {
        restrict: 'E',
        transclude: false,
        scope: { metric: '@', explain: '@' },
        controller: iframelinkController,
        templateUrl: _vbPluginUrl + 'admin/js/templates/iframelink.html',
        replace: true
    };
});
'use strict';

/*
 * The "pane" directive of the VB dashboard.
 */

var paneController = function paneController($scope, $http, $timeout, datasetsService) {
    $scope.ctrl = this;
    var that = this;

    // These are the chart attributes.
    var atts = $scope.atts = {};

    // While loading, we provide filler data.
    var loading = true;
    $scope.chartData = {};
    $scope.datasets = [{
        id: 'loading...',
        uploaded_name: '[loading...]'
    }];
    $scope.chartData.dataset = $scope.datasets[0]; // for <select>
    $scope.chartData.datasets = $scope.datasets[0]; // for <select multiple>
    $scope.atts.data = $scope.datasets[0].id;

    // A flag we use in the $watch function and addSecondDefaultSelectedDataset().
    var toAddSecondDataset = false;

    // Watch function for when new datasets are loaded.
    $scope.$watch(datasetsService.getCount, function (count) {
        if (count > 0) {
            $scope.datasets = datasetsService.getDatasets();

            if (loading) {
                loading = false;
                $scope.chartData.dataset = $scope.datasets[0];
                $scope.chartData.datasets = [$scope.datasets[0]];
                $scope.atts.data = $scope.datasets[0].id;

                if ($scope.selected) {
                    $timeout(that.redrawCharts, 0);
                }
            }

            if (toAddSecondDataset && count > 1) {
                this.addSecondDefaultSelectedDataset();
            }
        }
    });

    // Add a second dataset to the chartdata.
    // A <select multiple> can emit an event to trigger this.
    this.addSecondDefaultSelectedDataset = function () {
        // Add a second default-selected dataset
        // for <select multiple>.
        if (datasetsService.getCount() > 1) {
            $scope.chartData.datasets.push($scope.datasets[1]);
            $scope.atts.data = $scope.chartData.datasets.map(function (e) {
                return e.id;
            }).join(',');

            if ($scope.selected) {
                $timeout(that.redrawCharts, 0);
            }

            toAddSecondDataset = false;
        } else {
            // More datasets haven't loaded yet, so set the flag.
            toAddSecondDataset = true;
        }
    };

    // The dataset <select> has to emit whether it is a multiple select or not,
    // once it is created. Register that event.
    $scope.$on('addSecondDefaultSelectedDataset', this.addSecondDefaultSelectedDataset);

    var charts = $scope.charts = [];
    this.addChart = function (chart) {
        charts.push(chart);
    };

    var datasetSelect = $scope.datasetSelect = null;
    this.addDatasetSelect = function (select) {
        datasetSelect = select;
    };

    this.redrawCharts = function () {
        // Don't redraw charts if no datasets have been loaded.
        if (loading) {
            return;
        }

        var _loop = function _loop(k) {
            $http.get($scope.charts[k].ctrl.getUrl()).success(function (response) {
                $scope.charts[k].ctrl.setHtml(response);

                // On last iteration, re-initialize VB.
                if (k == $scope.charts.length - 1) {
                    $timeout(visualbudget.initialize, 0);
                }
            });
        };

        for (var k = 0; k < $scope.charts.length; k++) {
            _loop(k);
        }
    };
};

var paneLinkFunction = function paneLinkFunction(scope, element, attrs, tabsController) {
    tabsController.addPane(scope);
};

angular.module('vbAdmin.tabs').directive('pane', function () {
    return {
        require: '^tabs',
        restrict: 'E',
        transclude: true,
        scope: { title: '@' },
        link: paneLinkFunction,
        templateUrl: _vbPluginUrl + 'admin/js/templates/pane.html',
        replace: true,
        controller: paneController
    };
});
'use strict';

/*
 * The "shortcode" directive of the VB dashboard.
 */

var shortcodeController = function shortcodeController($scope, $http) {
    $scope.ctrl = this;

    this.shortcode = function () {
        var atts = angular.copy($scope.$parent.$parent.atts);
        if ($scope.metric) {
            atts.metric = $scope.metric;
        }

        return '[visualbudget ' + this.serialize(atts) + ']';
    };

    // Turn a JS object into a query string of some form.
    // based on code from  http://stackoverflow.com/a/1714899
    this.serialize = function (obj) {
        var sep = ' ';
        var str = [];
        for (var p in obj) {
            if (obj.hasOwnProperty(p)) {
                var prop = encodeURIComponent(p);
                var val = encodeURIComponent(obj[p]).replace(/%2C/g, ","); // Commas abide.
                str.push(prop + "=" + val);
            }
        }return str.join(sep);
    };
};

angular.module('vbAdmin.shortcode').directive('shortcode', function () {
    return {
        restrict: 'E',
        transclude: false,
        scope: { metric: '@', explain: '@' },
        controller: shortcodeController,
        templateUrl: _vbPluginUrl + 'admin/js/templates/shortcode.html',
        replace: true
    };
});
'use strict';

/*
 * The "tabs" directive of the VB dashboard.
 */

var tabsController = function tabsController($scope, $http) {
    var panes = $scope.panes = [];

    $scope.select = function (pane) {
        angular.forEach(panes, function (pane) {
            pane.selected = false;
        });
        pane.selected = true;
        pane.ctrl.redrawCharts();
    };

    this.addPane = function (pane) {
        if (panes.length == 0) $scope.select(pane);
        panes.push(pane);
    };
};

angular.module('vbAdmin.tabs').directive('tabs', function () {
    return {
        restrict: 'E',
        transclude: true,
        scope: false,
        controller: tabsController,
        templateUrl: _vbPluginUrl + 'admin/js/templates/tabs.html',
        replace: true
    };
});